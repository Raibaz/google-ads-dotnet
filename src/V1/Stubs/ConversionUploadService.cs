// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/googleads/v1/services/conversion_upload_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.GoogleAds.V1.Services {

  /// <summary>Holder for reflection information generated from google/ads/googleads/v1/services/conversion_upload_service.proto</summary>
  public static partial class ConversionUploadServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/googleads/v1/services/conversion_upload_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConversionUploadServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkBnb29nbGUvYWRzL2dvb2dsZWFkcy92MS9zZXJ2aWNlcy9jb252ZXJzaW9u",
            "X3VwbG9hZF9zZXJ2aWNlLnByb3RvEiBnb29nbGUuYWRzLmdvb2dsZWFkcy52",
            "MS5zZXJ2aWNlcxocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoeZ29v",
            "Z2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGhdnb29nbGUvcnBjL3N0YXR1",
            "cy5wcm90byKVAQodVXBsb2FkQ2xpY2tDb252ZXJzaW9uc1JlcXVlc3QSEwoL",
            "Y3VzdG9tZXJfaWQYASABKAkSRgoLY29udmVyc2lvbnMYAiADKAsyMS5nb29n",
            "bGUuYWRzLmdvb2dsZWFkcy52MS5zZXJ2aWNlcy5DbGlja0NvbnZlcnNpb24S",
            "FwoPcGFydGlhbF9mYWlsdXJlGAMgASgIIp0BCh5VcGxvYWRDbGlja0NvbnZl",
            "cnNpb25zUmVzcG9uc2USMQoVcGFydGlhbF9mYWlsdXJlX2Vycm9yGAEgASgL",
            "MhIuZ29vZ2xlLnJwYy5TdGF0dXMSSAoHcmVzdWx0cxgCIAMoCzI3Lmdvb2ds",
            "ZS5hZHMuZ29vZ2xlYWRzLnYxLnNlcnZpY2VzLkNsaWNrQ29udmVyc2lvblJl",
            "c3VsdCKuAwoPQ2xpY2tDb252ZXJzaW9uEisKBWdjbGlkGAEgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjcKEWNvbnZlcnNpb25fYWN0aW9u",
            "GAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjoKFGNvbnZl",
            "cnNpb25fZGF0ZV90aW1lGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlEjYKEGNvbnZlcnNpb25fdmFsdWUYBCABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuRG91YmxlVmFsdWUSMwoNY3VycmVuY3lfY29kZRgFIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIuCghvcmRlcl9pZBgGIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRJcChlleHRlcm5hbF9hdHRy",
            "aWJ1dGlvbl9kYXRhGAcgASgLMjkuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEu",
            "c2VydmljZXMuRXh0ZXJuYWxBdHRyaWJ1dGlvbkRhdGEingEKF0V4dGVybmFs",
            "QXR0cmlidXRpb25EYXRhEkEKG2V4dGVybmFsX2F0dHJpYnV0aW9uX2NyZWRp",
            "dBgBIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJAChpleHRl",
            "cm5hbF9hdHRyaWJ1dGlvbl9tb2RlbBgCIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5TdHJpbmdWYWx1ZSK5AQoVQ2xpY2tDb252ZXJzaW9uUmVzdWx0EisKBWdj",
            "bGlkGAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjcKEWNv",
            "bnZlcnNpb25fYWN0aW9uGAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlEjoKFGNvbnZlcnNpb25fZGF0ZV90aW1lGAMgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlMvgBChdDb252ZXJzaW9uVXBsb2FkU2Vy",
            "dmljZRLcAQoWVXBsb2FkQ2xpY2tDb252ZXJzaW9ucxI/Lmdvb2dsZS5hZHMu",
            "Z29vZ2xlYWRzLnYxLnNlcnZpY2VzLlVwbG9hZENsaWNrQ29udmVyc2lvbnNS",
            "ZXF1ZXN0GkAuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjEuc2VydmljZXMuVXBs",
            "b2FkQ2xpY2tDb252ZXJzaW9uc1Jlc3BvbnNlIj+C0+STAjkiNC92MS9jdXN0",
            "b21lcnMve2N1c3RvbWVyX2lkPSp9OnVwbG9hZENsaWNrQ29udmVyc2lvbnM6",
            "ASpCgwIKJGNvbS5nb29nbGUuYWRzLmdvb2dsZWFkcy52MS5zZXJ2aWNlc0Ic",
            "Q29udmVyc2lvblVwbG9hZFNlcnZpY2VQcm90b1ABWkhnb29nbGUuZ29sYW5n",
            "Lm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fkcy9nb29nbGVhZHMvdjEvc2Vy",
            "dmljZXM7c2VydmljZXOiAgNHQUGqAiBHb29nbGUuQWRzLkdvb2dsZUFkcy5W",
            "MS5TZXJ2aWNlc8oCIEdvb2dsZVxBZHNcR29vZ2xlQWRzXFYxXFNlcnZpY2Vz",
            "6gIkR29vZ2xlOjpBZHM6Okdvb2dsZUFkczo6VjE6OlNlcnZpY2VzYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Rpc.StatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.UploadClickConversionsRequest), global::Google.Ads.GoogleAds.V1.Services.UploadClickConversionsRequest.Parser, new[]{ "CustomerId", "Conversions", "PartialFailure" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.UploadClickConversionsResponse), global::Google.Ads.GoogleAds.V1.Services.UploadClickConversionsResponse.Parser, new[]{ "PartialFailureError", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.ClickConversion), global::Google.Ads.GoogleAds.V1.Services.ClickConversion.Parser, new[]{ "Gclid", "ConversionAction", "ConversionDateTime", "ConversionValue", "CurrencyCode", "OrderId", "ExternalAttributionData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.ExternalAttributionData), global::Google.Ads.GoogleAds.V1.Services.ExternalAttributionData.Parser, new[]{ "ExternalAttributionCredit", "ExternalAttributionModel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.GoogleAds.V1.Services.ClickConversionResult), global::Google.Ads.GoogleAds.V1.Services.ClickConversionResult.Parser, new[]{ "Gclid", "ConversionAction", "ConversionDateTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request message for [ConversionUploadService.UploadClickConversions][google.ads.googleads.v1.services.ConversionUploadService.UploadClickConversions].
  /// </summary>
  public sealed partial class UploadClickConversionsRequest : pb::IMessage<UploadClickConversionsRequest> {
    private static readonly pb::MessageParser<UploadClickConversionsRequest> _parser = new pb::MessageParser<UploadClickConversionsRequest>(() => new UploadClickConversionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadClickConversionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionUploadServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadClickConversionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadClickConversionsRequest(UploadClickConversionsRequest other) : this() {
      customerId_ = other.customerId_;
      conversions_ = other.conversions_.Clone();
      partialFailure_ = other.partialFailure_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadClickConversionsRequest Clone() {
      return new UploadClickConversionsRequest(this);
    }

    /// <summary>Field number for the "customer_id" field.</summary>
    public const int CustomerIdFieldNumber = 1;
    private string customerId_ = "";
    /// <summary>
    /// The ID of the customer performing the upload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomerId {
      get { return customerId_; }
      set {
        customerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "conversions" field.</summary>
    public const int ConversionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V1.Services.ClickConversion> _repeated_conversions_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Ads.GoogleAds.V1.Services.ClickConversion.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ClickConversion> conversions_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ClickConversion>();
    /// <summary>
    /// The conversions that are being uploaded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ClickConversion> Conversions {
      get { return conversions_; }
    }

    /// <summary>Field number for the "partial_failure" field.</summary>
    public const int PartialFailureFieldNumber = 3;
    private bool partialFailure_;
    /// <summary>
    /// If true, successful operations will be carried out and invalid
    /// operations will return errors. If false, all operations will be carried
    /// out in one transaction if and only if they are all valid.
    /// This should always be set to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PartialFailure {
      get { return partialFailure_; }
      set {
        partialFailure_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadClickConversionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadClickConversionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomerId != other.CustomerId) return false;
      if(!conversions_.Equals(other.conversions_)) return false;
      if (PartialFailure != other.PartialFailure) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomerId.Length != 0) hash ^= CustomerId.GetHashCode();
      hash ^= conversions_.GetHashCode();
      if (PartialFailure != false) hash ^= PartialFailure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CustomerId);
      }
      conversions_.WriteTo(output, _repeated_conversions_codec);
      if (PartialFailure != false) {
        output.WriteRawTag(24);
        output.WriteBool(PartialFailure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomerId);
      }
      size += conversions_.CalculateSize(_repeated_conversions_codec);
      if (PartialFailure != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadClickConversionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.CustomerId.Length != 0) {
        CustomerId = other.CustomerId;
      }
      conversions_.Add(other.conversions_);
      if (other.PartialFailure != false) {
        PartialFailure = other.PartialFailure;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CustomerId = input.ReadString();
            break;
          }
          case 18: {
            conversions_.AddEntriesFrom(input, _repeated_conversions_codec);
            break;
          }
          case 24: {
            PartialFailure = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response message for [ConversionUploadService.UploadClickConversions][google.ads.googleads.v1.services.ConversionUploadService.UploadClickConversions].
  /// </summary>
  public sealed partial class UploadClickConversionsResponse : pb::IMessage<UploadClickConversionsResponse> {
    private static readonly pb::MessageParser<UploadClickConversionsResponse> _parser = new pb::MessageParser<UploadClickConversionsResponse>(() => new UploadClickConversionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UploadClickConversionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionUploadServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadClickConversionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadClickConversionsResponse(UploadClickConversionsResponse other) : this() {
      partialFailureError_ = other.partialFailureError_ != null ? other.partialFailureError_.Clone() : null;
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UploadClickConversionsResponse Clone() {
      return new UploadClickConversionsResponse(this);
    }

    /// <summary>Field number for the "partial_failure_error" field.</summary>
    public const int PartialFailureErrorFieldNumber = 1;
    private global::Google.Rpc.Status partialFailureError_;
    /// <summary>
    /// Errors that pertain to conversion failures in the partial failure mode.
    /// Returned when all errors occur inside the conversions. If any errors occur
    /// outside the conversions (e.g. auth errors), we return an RPC level error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Rpc.Status PartialFailureError {
      get { return partialFailureError_; }
      set {
        partialFailureError_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Ads.GoogleAds.V1.Services.ClickConversionResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Ads.GoogleAds.V1.Services.ClickConversionResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ClickConversionResult> results_ = new pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ClickConversionResult>();
    /// <summary>
    /// Returned for successfully processed conversions. Proto will be empty for
    /// rows that received an error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Ads.GoogleAds.V1.Services.ClickConversionResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UploadClickConversionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UploadClickConversionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PartialFailureError, other.PartialFailureError)) return false;
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (partialFailureError_ != null) hash ^= PartialFailureError.GetHashCode();
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (partialFailureError_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PartialFailureError);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (partialFailureError_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartialFailureError);
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UploadClickConversionsResponse other) {
      if (other == null) {
        return;
      }
      if (other.partialFailureError_ != null) {
        if (partialFailureError_ == null) {
          partialFailureError_ = new global::Google.Rpc.Status();
        }
        PartialFailureError.MergeFrom(other.PartialFailureError);
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (partialFailureError_ == null) {
              partialFailureError_ = new global::Google.Rpc.Status();
            }
            input.ReadMessage(partialFailureError_);
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A click conversion.
  /// </summary>
  public sealed partial class ClickConversion : pb::IMessage<ClickConversion> {
    private static readonly pb::MessageParser<ClickConversion> _parser = new pb::MessageParser<ClickConversion>(() => new ClickConversion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClickConversion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionUploadServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickConversion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickConversion(ClickConversion other) : this() {
      Gclid = other.Gclid;
      ConversionAction = other.ConversionAction;
      ConversionDateTime = other.ConversionDateTime;
      ConversionValue = other.ConversionValue;
      CurrencyCode = other.CurrencyCode;
      OrderId = other.OrderId;
      externalAttributionData_ = other.externalAttributionData_ != null ? other.externalAttributionData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickConversion Clone() {
      return new ClickConversion(this);
    }

    /// <summary>Field number for the "gclid" field.</summary>
    public const int GclidFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_gclid_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string gclid_;
    /// <summary>
    /// The Google click ID (gclid) associated with this conversion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gclid {
      get { return gclid_; }
      set {
        gclid_ = value;
      }
    }

    /// <summary>Field number for the "conversion_action" field.</summary>
    public const int ConversionActionFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_conversionAction_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string conversionAction_;
    /// <summary>
    /// Resource name of the conversion action associated with this conversion.
    /// Note: Although this resource name consists of a customer id and a
    /// conversion action id, validation will ignore the customer id and use the
    /// conversion action id as the sole identifier of the conversion action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionAction {
      get { return conversionAction_; }
      set {
        conversionAction_ = value;
      }
    }

    /// <summary>Field number for the "conversion_date_time" field.</summary>
    public const int ConversionDateTimeFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_conversionDateTime_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string conversionDateTime_;
    /// <summary>
    /// The date time at which the conversion occurred. Must be after
    /// the click time. The timezone must be specified. The format is
    /// "yyyy-mm-dd hh:mm:ss+|-hh:mm", e.g. “2019-01-01 12:32:45-08:00”.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionDateTime {
      get { return conversionDateTime_; }
      set {
        conversionDateTime_ = value;
      }
    }

    /// <summary>Field number for the "conversion_value" field.</summary>
    public const int ConversionValueFieldNumber = 4;
    private static readonly pb::FieldCodec<double?> _single_conversionValue_codec = pb::FieldCodec.ForStructWrapper<double>(34);
    private double? conversionValue_;
    /// <summary>
    /// The value of the conversion for the advertiser.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ConversionValue {
      get { return conversionValue_; }
      set {
        conversionValue_ = value;
      }
    }

    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_currencyCode_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string currencyCode_;
    /// <summary>
    /// Currency associated with the conversion value. This is the ISO 4217
    /// 3-character currency code. For example: USD, EUR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = value;
      }
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_orderId_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string orderId_;
    /// <summary>
    /// The order ID associated with the conversion. An order id can only be used
    /// for one conversion per conversion action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    /// <summary>Field number for the "external_attribution_data" field.</summary>
    public const int ExternalAttributionDataFieldNumber = 7;
    private global::Google.Ads.GoogleAds.V1.Services.ExternalAttributionData externalAttributionData_;
    /// <summary>
    /// Additional data about externally attributed conversions. This field
    /// is required for conversions with an externally attributed conversion
    /// action, but should not be set otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Ads.GoogleAds.V1.Services.ExternalAttributionData ExternalAttributionData {
      get { return externalAttributionData_; }
      set {
        externalAttributionData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClickConversion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClickConversion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gclid != other.Gclid) return false;
      if (ConversionAction != other.ConversionAction) return false;
      if (ConversionDateTime != other.ConversionDateTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ConversionValue, other.ConversionValue)) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if (OrderId != other.OrderId) return false;
      if (!object.Equals(ExternalAttributionData, other.ExternalAttributionData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gclid_ != null) hash ^= Gclid.GetHashCode();
      if (conversionAction_ != null) hash ^= ConversionAction.GetHashCode();
      if (conversionDateTime_ != null) hash ^= ConversionDateTime.GetHashCode();
      if (conversionValue_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ConversionValue);
      if (currencyCode_ != null) hash ^= CurrencyCode.GetHashCode();
      if (orderId_ != null) hash ^= OrderId.GetHashCode();
      if (externalAttributionData_ != null) hash ^= ExternalAttributionData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gclid_ != null) {
        _single_gclid_codec.WriteTagAndValue(output, Gclid);
      }
      if (conversionAction_ != null) {
        _single_conversionAction_codec.WriteTagAndValue(output, ConversionAction);
      }
      if (conversionDateTime_ != null) {
        _single_conversionDateTime_codec.WriteTagAndValue(output, ConversionDateTime);
      }
      if (conversionValue_ != null) {
        _single_conversionValue_codec.WriteTagAndValue(output, ConversionValue);
      }
      if (currencyCode_ != null) {
        _single_currencyCode_codec.WriteTagAndValue(output, CurrencyCode);
      }
      if (orderId_ != null) {
        _single_orderId_codec.WriteTagAndValue(output, OrderId);
      }
      if (externalAttributionData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ExternalAttributionData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gclid_ != null) {
        size += _single_gclid_codec.CalculateSizeWithTag(Gclid);
      }
      if (conversionAction_ != null) {
        size += _single_conversionAction_codec.CalculateSizeWithTag(ConversionAction);
      }
      if (conversionDateTime_ != null) {
        size += _single_conversionDateTime_codec.CalculateSizeWithTag(ConversionDateTime);
      }
      if (conversionValue_ != null) {
        size += _single_conversionValue_codec.CalculateSizeWithTag(ConversionValue);
      }
      if (currencyCode_ != null) {
        size += _single_currencyCode_codec.CalculateSizeWithTag(CurrencyCode);
      }
      if (orderId_ != null) {
        size += _single_orderId_codec.CalculateSizeWithTag(OrderId);
      }
      if (externalAttributionData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalAttributionData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClickConversion other) {
      if (other == null) {
        return;
      }
      if (other.gclid_ != null) {
        if (gclid_ == null || other.Gclid != "") {
          Gclid = other.Gclid;
        }
      }
      if (other.conversionAction_ != null) {
        if (conversionAction_ == null || other.ConversionAction != "") {
          ConversionAction = other.ConversionAction;
        }
      }
      if (other.conversionDateTime_ != null) {
        if (conversionDateTime_ == null || other.ConversionDateTime != "") {
          ConversionDateTime = other.ConversionDateTime;
        }
      }
      if (other.conversionValue_ != null) {
        if (conversionValue_ == null || other.ConversionValue != 0D) {
          ConversionValue = other.ConversionValue;
        }
      }
      if (other.currencyCode_ != null) {
        if (currencyCode_ == null || other.CurrencyCode != "") {
          CurrencyCode = other.CurrencyCode;
        }
      }
      if (other.orderId_ != null) {
        if (orderId_ == null || other.OrderId != "") {
          OrderId = other.OrderId;
        }
      }
      if (other.externalAttributionData_ != null) {
        if (externalAttributionData_ == null) {
          externalAttributionData_ = new global::Google.Ads.GoogleAds.V1.Services.ExternalAttributionData();
        }
        ExternalAttributionData.MergeFrom(other.ExternalAttributionData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_gclid_codec.Read(input);
            if (gclid_ == null || value != "") {
              Gclid = value;
            }
            break;
          }
          case 18: {
            string value = _single_conversionAction_codec.Read(input);
            if (conversionAction_ == null || value != "") {
              ConversionAction = value;
            }
            break;
          }
          case 26: {
            string value = _single_conversionDateTime_codec.Read(input);
            if (conversionDateTime_ == null || value != "") {
              ConversionDateTime = value;
            }
            break;
          }
          case 34: {
            double? value = _single_conversionValue_codec.Read(input);
            if (conversionValue_ == null || value != 0D) {
              ConversionValue = value;
            }
            break;
          }
          case 42: {
            string value = _single_currencyCode_codec.Read(input);
            if (currencyCode_ == null || value != "") {
              CurrencyCode = value;
            }
            break;
          }
          case 50: {
            string value = _single_orderId_codec.Read(input);
            if (orderId_ == null || value != "") {
              OrderId = value;
            }
            break;
          }
          case 58: {
            if (externalAttributionData_ == null) {
              externalAttributionData_ = new global::Google.Ads.GoogleAds.V1.Services.ExternalAttributionData();
            }
            input.ReadMessage(externalAttributionData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Contains additional information about externally attributed conversions.
  /// </summary>
  public sealed partial class ExternalAttributionData : pb::IMessage<ExternalAttributionData> {
    private static readonly pb::MessageParser<ExternalAttributionData> _parser = new pb::MessageParser<ExternalAttributionData>(() => new ExternalAttributionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExternalAttributionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionUploadServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalAttributionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalAttributionData(ExternalAttributionData other) : this() {
      ExternalAttributionCredit = other.ExternalAttributionCredit;
      ExternalAttributionModel = other.ExternalAttributionModel;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalAttributionData Clone() {
      return new ExternalAttributionData(this);
    }

    /// <summary>Field number for the "external_attribution_credit" field.</summary>
    public const int ExternalAttributionCreditFieldNumber = 1;
    private static readonly pb::FieldCodec<double?> _single_externalAttributionCredit_codec = pb::FieldCodec.ForStructWrapper<double>(10);
    private double? externalAttributionCredit_;
    /// <summary>
    /// Represents the fraction of the conversion that is attributed to the
    /// Google Ads click.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? ExternalAttributionCredit {
      get { return externalAttributionCredit_; }
      set {
        externalAttributionCredit_ = value;
      }
    }

    /// <summary>Field number for the "external_attribution_model" field.</summary>
    public const int ExternalAttributionModelFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_externalAttributionModel_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string externalAttributionModel_;
    /// <summary>
    /// Specifies the attribution model name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalAttributionModel {
      get { return externalAttributionModel_; }
      set {
        externalAttributionModel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExternalAttributionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExternalAttributionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(ExternalAttributionCredit, other.ExternalAttributionCredit)) return false;
      if (ExternalAttributionModel != other.ExternalAttributionModel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (externalAttributionCredit_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(ExternalAttributionCredit);
      if (externalAttributionModel_ != null) hash ^= ExternalAttributionModel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (externalAttributionCredit_ != null) {
        _single_externalAttributionCredit_codec.WriteTagAndValue(output, ExternalAttributionCredit);
      }
      if (externalAttributionModel_ != null) {
        _single_externalAttributionModel_codec.WriteTagAndValue(output, ExternalAttributionModel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (externalAttributionCredit_ != null) {
        size += _single_externalAttributionCredit_codec.CalculateSizeWithTag(ExternalAttributionCredit);
      }
      if (externalAttributionModel_ != null) {
        size += _single_externalAttributionModel_codec.CalculateSizeWithTag(ExternalAttributionModel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExternalAttributionData other) {
      if (other == null) {
        return;
      }
      if (other.externalAttributionCredit_ != null) {
        if (externalAttributionCredit_ == null || other.ExternalAttributionCredit != 0D) {
          ExternalAttributionCredit = other.ExternalAttributionCredit;
        }
      }
      if (other.externalAttributionModel_ != null) {
        if (externalAttributionModel_ == null || other.ExternalAttributionModel != "") {
          ExternalAttributionModel = other.ExternalAttributionModel;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            double? value = _single_externalAttributionCredit_codec.Read(input);
            if (externalAttributionCredit_ == null || value != 0D) {
              ExternalAttributionCredit = value;
            }
            break;
          }
          case 18: {
            string value = _single_externalAttributionModel_codec.Read(input);
            if (externalAttributionModel_ == null || value != "") {
              ExternalAttributionModel = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Identifying information for a successfully processed ClickConversion.
  /// </summary>
  public sealed partial class ClickConversionResult : pb::IMessage<ClickConversionResult> {
    private static readonly pb::MessageParser<ClickConversionResult> _parser = new pb::MessageParser<ClickConversionResult>(() => new ClickConversionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClickConversionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.GoogleAds.V1.Services.ConversionUploadServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickConversionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickConversionResult(ClickConversionResult other) : this() {
      Gclid = other.Gclid;
      ConversionAction = other.ConversionAction;
      ConversionDateTime = other.ConversionDateTime;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickConversionResult Clone() {
      return new ClickConversionResult(this);
    }

    /// <summary>Field number for the "gclid" field.</summary>
    public const int GclidFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_gclid_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string gclid_;
    /// <summary>
    /// The Google Click ID (gclid) associated with this conversion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gclid {
      get { return gclid_; }
      set {
        gclid_ = value;
      }
    }

    /// <summary>Field number for the "conversion_action" field.</summary>
    public const int ConversionActionFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_conversionAction_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string conversionAction_;
    /// <summary>
    /// Resource name of the conversion action associated with this conversion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionAction {
      get { return conversionAction_; }
      set {
        conversionAction_ = value;
      }
    }

    /// <summary>Field number for the "conversion_date_time" field.</summary>
    public const int ConversionDateTimeFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_conversionDateTime_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string conversionDateTime_;
    /// <summary>
    /// The date time at which the conversion occurred. The format is
    /// "yyyy-mm-dd hh:mm:ss+|-hh:mm", e.g. “2019-01-01 12:32:45-08:00”.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConversionDateTime {
      get { return conversionDateTime_; }
      set {
        conversionDateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClickConversionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClickConversionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gclid != other.Gclid) return false;
      if (ConversionAction != other.ConversionAction) return false;
      if (ConversionDateTime != other.ConversionDateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gclid_ != null) hash ^= Gclid.GetHashCode();
      if (conversionAction_ != null) hash ^= ConversionAction.GetHashCode();
      if (conversionDateTime_ != null) hash ^= ConversionDateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gclid_ != null) {
        _single_gclid_codec.WriteTagAndValue(output, Gclid);
      }
      if (conversionAction_ != null) {
        _single_conversionAction_codec.WriteTagAndValue(output, ConversionAction);
      }
      if (conversionDateTime_ != null) {
        _single_conversionDateTime_codec.WriteTagAndValue(output, ConversionDateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gclid_ != null) {
        size += _single_gclid_codec.CalculateSizeWithTag(Gclid);
      }
      if (conversionAction_ != null) {
        size += _single_conversionAction_codec.CalculateSizeWithTag(ConversionAction);
      }
      if (conversionDateTime_ != null) {
        size += _single_conversionDateTime_codec.CalculateSizeWithTag(ConversionDateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClickConversionResult other) {
      if (other == null) {
        return;
      }
      if (other.gclid_ != null) {
        if (gclid_ == null || other.Gclid != "") {
          Gclid = other.Gclid;
        }
      }
      if (other.conversionAction_ != null) {
        if (conversionAction_ == null || other.ConversionAction != "") {
          ConversionAction = other.ConversionAction;
        }
      }
      if (other.conversionDateTime_ != null) {
        if (conversionDateTime_ == null || other.ConversionDateTime != "") {
          ConversionDateTime = other.ConversionDateTime;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_gclid_codec.Read(input);
            if (gclid_ == null || value != "") {
              Gclid = value;
            }
            break;
          }
          case 18: {
            string value = _single_conversionAction_codec.Read(input);
            if (conversionAction_ == null || value != "") {
              ConversionAction = value;
            }
            break;
          }
          case 26: {
            string value = _single_conversionDateTime_codec.Read(input);
            if (conversionDateTime_ == null || value != "") {
              ConversionDateTime = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
